name: UPDATE-ALL-PACKAGES

on:
  schedule:
    - cron:  '0 */2 * * *'
  workflow_dispatch:

env:
    CHOCO_API_KEY: ${{ secrets.CHOCO_API_KEY }}
    ACTIONS_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
    PST_KEY: ${{ secrets.PST_KEY }}
    PST_SECRET: ${{ secrets.PST_SECRET }}
    PST_TOKEN: ${{ secrets.PST_TOKEN }}
    PST_TOKEN_SECRET: ${{ secrets.PST_TOKEN_SECRET }}
    TELEGRAM: ${{ secrets.TELEGRAM }}
    CHAT_ID: ${{ secrets.CHAT_ID }}
    MASTODON: ${{ secrets.MASTODON }}

jobs:
  UPDATE-ALL:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: PARAMETERS
        run:  |
          # CHOCO KEY
          choco apikey --key $env:CHOCO_API_KEY --source https://push.chocolatey.org/

      - name: AUDIOMOTH-CONFIG
        if: always()
        run:  |
          $headers = @{Authorization="Bearer $env:ACTIONS_TOKEN"}
          $Version = ([xml](Get-Content ./audiomoth-config/audiomoth-config.nuspec)).package.metadata.version
          $tag = (Invoke-WebRequest "https://api.github.com/repos/OpenAcousticDevices/AudioMoth-Configuration-App/releases/latest" -Headers $headers | ConvertFrom-Json)[0].name
          
          echo $Version
          echo $tag
          
          if ( $tag -eq $Version )
          {
          echo 'Last version already exist'
          }
          else
          {
          if ($tag -match '^[0-9]+.[0-9]+(.[0-9]+)?$'){
          ./send_audiomoth-config.ps1
          } else {
          echo 'The version number is not in the correct format'
          #exit 1
          }
          }

      - name: AUDIOMOTH-FLASH
        if: always()
        run:  |
          $headers = @{Authorization="Bearer $env:ACTIONS_TOKEN"}
          $Version = ([xml](Get-Content ./audiomoth-flash/audiomoth-flash.nuspec)).package.metadata.version
          $tag = (Invoke-WebRequest "https://api.github.com/repos/OpenAcousticDevices/AudioMoth-Flash-App/releases/latest" -Headers $headers | ConvertFrom-Json)[0].name
          
          echo $Version
          echo $tag
          
          if ( $tag -eq $Version )
          {
          echo 'Last version already exist'
          }
          else
          {
          if ($tag -match '^[0-9]+.[0-9]+(.[0-9]+)?$'){
          ./send_audiomoth-flash.ps1
          } else {
          echo 'The version number is not in the correct format'
          #exit 1
          }
          }
        
      - name: AUDIOMOTH-TIME
        if: always()
        run:  |
          $headers = @{Authorization="Bearer $env:ACTIONS_TOKEN"}
          $Version = ([xml](Get-Content ./audiomoth-time/audiomoth-time.nuspec)).package.metadata.version
          $tag = (Invoke-WebRequest "https://api.github.com/repos/OpenAcousticDevices/AudioMoth-Time-App/releases/latest" -Headers $headers | ConvertFrom-Json)[0].name
          
          echo $Version
          echo $tag
          
          if ( $tag -eq $Version )
          {
          echo 'Last version already exist'
          }
          else
          {
          if ($tag -match '^[0-9]+.[0-9]+(.[0-9]+)?$'){
          ./send_audiomoth-time.ps1
          } else {
          echo 'The version number is not in the correct format'
          #exit 1
          }
          }
        
      - name: AUDIOMOTH-USB
        if: always()
        run:  |
          $headers = @{Authorization="Bearer $env:ACTIONS_TOKEN"}
          $Version = ([xml](Get-Content ./audiomoth-usb/audiomoth-usb.nuspec)).package.metadata.version
          $tag = (Invoke-WebRequest "https://api.github.com/repos/OpenAcousticDevices/AudioMoth-USB-Microphone-App/releases/latest" -Headers $headers | ConvertFrom-Json)[0].name
          
          echo $Version
          echo $tag
          
          if ( $tag -eq $Version )
          {
          echo 'Last version already exist'
          }
          else
          {
          if ($tag -match '^[0-9]+.[0-9]+(.[0-9]+)?$'){
          ./send_audiomoth-usb.ps1
          } else {
          echo 'The version number is not in the correct format'
          #exit 1
          }
          }
        
      - name: DOTBROWSER
        if: always()
        run:  |
          $headers = @{Authorization="Bearer $env:ACTIONS_TOKEN"}
          $Version = ([xml](Get-Content ./dotbrowser/dotbrowser.nuspec)).package.metadata.version
          $tag = (Invoke-WebRequest "https://api.github.com/repos/dothq/browser-desktop/releases/latest" -Headers $headers | ConvertFrom-Json)[0].tag_name
          
          $tagalpha = $tag -replace '([0-9]*\.[0-9]+)-([0-9]{4})-([0-9]{2})-([0-9]{2})', '$1.$2$3$4'
          $tagalpha = -join($tagalpha,"-alpha");
          
          echo $Version
          echo $tagalpha
          
          if ( $tagalpha -eq $Version )
          {
          echo 'Last version already exist'
          }
          else
          {
          #if ($tag -match '^[0-9]+.[0-9]+(.[0-9]+)?$'){
          ./send_dotbrowser.ps1
          #} else {
          #echo 'The version number is not in the correct format'
          ##exit 1
          #}
          }
        
      - name: FLUFFYCHAT
        if: always()
        run:  |
          $Version = ([xml](Get-Content ./fluffychat/fluffychat.nuspec)).package.metadata.version
          $tag = (Invoke-WebRequest "https://gitlab.com/api/v4/projects/16112282/releases" | ConvertFrom-Json)[0].tag_name
          $tag = $tag.Trim("v")
          
          echo $Version
          echo $tag
          
          if ( $tag -eq $Version ) { echo 'Last version already exist' } else {
          if ($tag -match '^[0-9]+.[0-9]+(.[0-9]+)?$') {
          $url_test = (Invoke-Webrequest -uri 'https://gitlab.com/api/v4/projects/16112282/packages/generic/fluffychat/$tag/fluffychat-windows.zip' -SkipHttpErrorCheck)
          $url_test.StatusCode
          if ( $url_test.StatusCode -eq '404' ) { echo 'No ZIP file for this version' } else {
          Invoke-WebRequest -Uri "https://gitlab.com/api/v4/projects/16112282/packages/generic/fluffychat/$tag/fluffychat-windows.zip" -OutFile "fluffychat.zip"
          mkdir fc
          Expand-Archive "fluffychat.zip" -DestinationPath ./fc/
          $gci = (Get-ChildItem -Path ./fc/ -Filter "fluffychat.exe" -Recurse -ErrorAction SilentlyContinue -Force)
          if (!$gci.name) { echo 'The executable does not exist' } else {
          ./send_fluffychat.ps1
          Remove-Item "fluffychat.zip"
          Remove-Item -Recurse -Force ./fc
          }} else {
          echo 'The version number is not in the correct format'
          Remove-Item "fluffychat.zip"
          Remove-Item -Recurse -Force ./fc
          #exit 1
          }}}
        
      - name: HOMEBANK
        if: always()
        run:  |
          $Version = ([xml](Get-Content ./homebank/homebank.nuspec)).package.metadata.version
          Invoke-WebRequest -Uri "http://homebank.free.fr/en/downloads.php" -OutFile "HOMEBANK.html"          
          $Source = Get-Content -path HOMEBANK.html -raw
          $Source -match 'The latest <b>([0-9]+(\.[0-9]+)+) stable</b>'
          $tag = $matches[1]
          
          echo $Version
          echo $tag
          
          if ( $tag -eq $Version )
          {
          echo 'Last version already exist'
          Remove-Item HOMEBANK.html
          }
          else
          {
          if ($tag -match '^[0-9]+.[0-9]+(.[0-9]+)?$'){
          ./send_homebank.ps1
          Remove-Item HOMEBANK.html
          } else {
          echo 'The version number is not in the correct format'
          #exit 1
          }
          }
        
      - name: L0PHTCRACK
        if: always()
        run:  |
          $Version = ([xml](Get-Content ./l0phtcrack/l0phtcrack.nuspec)).package.metadata.version
          $tag = (Invoke-WebRequest "https://gitlab.com/api/v4/projects/28508791/releases" | ConvertFrom-Json)[0].tag_name
          
          echo $Version
          echo $tag
          
          if ( $tag -eq $Version )
          {
          echo 'Last version already exist'
          }
          else
          {
          if ($tag -match '^[0-9]+.[0-9]+(.[0-9]+)?$'){
          ./send_l0phtcrack.ps1
          } else {
          echo 'The version number is not in the correct format'
          #exit 1
          }
          }
        
      - name: RAVEN
        if: always()
        run:  |
          $headers = @{Authorization="Bearer $env:ACTIONS_TOKEN"}
          $Version = ([xml](Get-Content ./raven/raven.nuspec)).package.metadata.version
          $tag = (Invoke-WebRequest "https://api.github.com/repos/hello-efficiency-inc/raven-reader/releases/latest" -Headers $headers | ConvertFrom-Json)[0].name
          $tag = $tag.Trim("v")
          
          echo $Version
          echo $tag
          
          if ( $tag -eq $Version )
          {
          echo 'Last version already exist'
          }
          else
          {
          if ($tag -match '^[0-9]+.[0-9]+(.[0-9]+)?$'){
          ./send_raven.ps1
          } else {
          echo 'The version number is not in the correct format'
          #exit 1
          }
          }
        
      - name: SENGI
        if: always()
        run:  |
          $headers = @{Authorization="Bearer $env:ACTIONS_TOKEN"}
          $Version = ([xml](Get-Content ./sengi/sengi.nuspec)).package.metadata.version
          $tag = (Invoke-WebRequest "https://api.github.com/repos/NicolasConstant/sengi-electron/releases/latest" -Headers $headers | ConvertFrom-Json)[0].name
          
          echo $Version
          echo $tag
          
          if ( $tag -eq $Version )
          {
          echo 'Last version already exist'
          }
          else
          {
          if ($tag -match '^[0-9]+.[0-9]+(.[0-9]+)?$'){
          ./send_sengi.ps1
          } else {
          echo 'The version number is not in the correct format'
          #exit 1
          }
          }
        
      - name: TARTUBE
        if: always()
        run:  |
          $headers = @{Authorization="Bearer $env:ACTIONS_TOKEN"}
          $Version = ([xml](Get-Content ./tartube/tartube.nuspec)).package.metadata.version
          $tag = (Invoke-WebRequest "https://api.github.com/repos/axcore/tartube/releases/latest" -Headers $headers | ConvertFrom-Json)[0].tag_name
          $tag = $tag.Trim("v")
          $name = (Invoke-WebRequest "https://api.github.com/repos/axcore/tartube/releases/latest" -Headers $headers | ConvertFrom-Json)[0].name
          
          echo $Version
          echo $tag
          
          if ( $tag -eq $Version )
          {
          echo 'Last version already exist'
          }
          else
          {
          if ($tag -match '^[0-9]+.[0-9]+(.[0-9]+)?$'){
          if ( $name -match "Stable release( v$tag)?$" ) {
          ./send_tartube.ps1
          } else { echo 'Not a stable version' }
          } else {
          echo 'The version number is not in the correct format'
          #exit 1
          }
          }
        
      - name: TUTANOTA
        if: always()
        run:  |
          $headers = @{Authorization="Bearer $env:ACTIONS_TOKEN"}
          $Version = ([xml](Get-Content ./tutanota/tutanota.nuspec)).package.metadata.version
          $tag_releases = (Invoke-WebRequest "https://api.github.com/repos/tutao/tutanota/releases" -Headers $headers | ConvertFrom-Json) | where { $_.name -Match "[0-9]+\.[0-9]+\.[0-9]+ \(Desktop\)" }
          $tag = $tag_releases[0].name
          $tag = $tag -replace ' \(Desktop\)'
          
          echo $Version
          echo $tag
          
          if ( $tag -eq $Version )
          {
          echo 'Last version already exist'
          }
          else
          {
          if ($tag -match '^[0-9]+.[0-9]+(.[0-9]+)?$'){
          ./send_tutanota.ps1
          } else {
          echo 'The version number is not in the correct format'
          #exit 1
          }
          }
        
      - name: MENDELEY-RM
        if: always()
        run:  |
          $Version = ([xml](Get-Content ./mendeley-reference-manager/mendeley-reference-manager.nuspec)).package.metadata.version
          Invoke-WebRequest -Uri "https://www.mendeley.com/release-notes-reference-manager/" -OutFile "MRM.html"
          $Source = Get-Content -path MRM.html -raw
          $Source -match 'https://static.mendeley.com/md-stitch/releases/live/release-notes-reference-manager.([a-z\d]*).js'
          $Sourceurl = $matches[1]
          
          Invoke-WebRequest -Uri "https://static.mendeley.com/md-stitch/releases/live/release-notes-reference-manager.$Sourceurl.js" -OutFile "MRM.txt"
          $Source = Get-Content -path MRM.txt -raw
          $Source -match 'page:new URL\([a-z]\),path:"/v([0-9]+(\.[0-9]+)+)"'
          $tag = $matches[1]
          
          echo $Version
          echo $tag
          
          if ( $tag -eq $Version )
          {
          echo 'Last version already exist'
          Remove-Item MRM.txt
          Remove-Item MRM.html
          }
          else
          {
          if ($tag -match '^[0-9]+.[0-9]+(.[0-9]+)?$'){
          ./send_mendeley-reference-manager.ps1
          } else {
          echo 'The version number is not in the correct format'
          #exit 1
          }
          }
        
      - name: OPEN-VIDEO-DOWNLOADER
        if: always()
        run:  |
          $headers = @{Authorization="Bearer $env:ACTIONS_TOKEN"}
          $Version = ([xml](Get-Content ./open-video-downloader/open-video-downloader.nuspec)).package.metadata.version
          $tag = (Invoke-WebRequest "https://api.github.com/repos/jely2002/youtube-dl-gui/releases/latest" -Headers $headers | ConvertFrom-Json)[0].name
          $tag = $tag.Trim("v")
          
          echo $Version
          echo $tag
          
          if ( $tag -eq $Version )
          {
          echo 'Last version already exist'
          }
          else
          {
          if ($tag -match '^[0-9]+.[0-9]+(.[0-9]+)?$'){
          ./send_open-video-downloader.ps1
          } else {
          echo 'The version number is not in the correct format'
          #exit 1
          }
          }

      #- name: DOTDOTGOOSE
        #if: always()
        #run:  |
          #$headers = @{Authorization="Bearer $env:ACTIONS_TOKEN"}
          #$Version = ([xml](Get-Content ./dotdotgoose/dotdotgoose.nuspec)).package.metadata.version
          #Invoke-WebRequest -Uri "https://biodiversityinformatics.amnh.org/open_source/dotdotgoose/index.html" -OutFile "DDG.html"
          #$Source = Get-Content -path DDG.html
          #$Source -match '<ul class="local-list"> <li>[0-9]{4}-[0-9]{2}-[0-9]{2} - version ([0-9]+(\.[0-9]+)+) '
          #$tag = $matches[1]
          #
          #echo $Version
          #echo $tag
          #
          #if ( $tag -eq $Version )
          #{
          #echo 'Last version already exist'
          #Remove-Item DDG.html
          #}
          #else
          #{
          #if ($tag -match '^[0-9]+.[0-9]+(.[0-9]+)?$'){
          #./send_dotdotgoose.ps1
          #Remove-Item DDG.html
          #} else {
          #echo 'The version number is not in the correct format'
          #exit 1
          #}
          #}

      - name: FILEN
        if: always()
        run:  |
          $headers = @{Authorization="Bearer $env:ACTIONS_TOKEN"}
          $Version = ([xml](Get-Content ./filen/filen.nuspec)).package.metadata.version
          $tag = (Invoke-WebRequest "https://api.github.com/repos/FilenCloudDienste/filen-desktop/releases/latest" -Headers $headers | ConvertFrom-Json)[0].name
          
          echo $Version
          echo $tag
          
          if ( $tag -eq $Version )
          {
          echo 'Last version already exist'
          }
          else
          {
          if ($tag -match '^[0-9]+.[0-9]+(.[0-9]+)?$'){
          ./send_filen.ps1
          } else {
          echo 'The version number is not in the correct format'
          #exit 1
          }
          }
          
      - name: AFFINE-CLIENT
        if: always()
        run:  |
          $headers = @{Authorization="Bearer $env:ACTIONS_TOKEN"}
          $Version = ([xml](Get-Content ./affine-client/affine-client.nuspec)).package.metadata.version
          $tag = (Invoke-WebRequest "https://api.github.com/repos/m1911star/affine-client/releases/latest" -Headers $headers | ConvertFrom-Json)[0].name
          $tag = $tag.Trim("Affine Client v")
          if ( $tag -eq '0.1.1') { $tag = '0.2.0' }
          echo $Version
          echo $tag
          
          if ( $tag -eq $Version )
          {
          echo 'Last version already exist'
          }
          else
          {
          if ($tag -match '^[0-9]+.[0-9]+(.[0-9]+)?$'){
          ./send_affine-client.ps1
          } else {
          echo 'The version number is not in the correct format'
          #exit 1
          }
          }

      - name: NOTESNOOK
        if: always()
        run:  |
          $headers = @{Authorization="Bearer $env:ACTIONS_TOKEN"}
          $Version = ([xml](Get-Content ./notesnook/notesnook.nuspec)).package.metadata.version
          $tag = (Invoke-WebRequest "https://api.github.com/repos/streetwriters/notesnook/releases/latest" -Headers $headers | ConvertFrom-Json)[0].tag_name
          $tag = $tag.Trim("v")
          
          echo $Version
          echo $tag
          
          if ( $tag -eq $Version )
          {
          echo 'Last version already exist'
          }
          else
          {
          if ($tag -match '^[0-9]+.[0-9]+(.[0-9]+)?$'){
          ./send_notesnook.ps1
          } else {
          echo 'The version number is not in the correct format'
          #exit 1
          }
          }
          
      - name: TENACITY
        if: always()
        run:  |
          $Version = ([xml](Get-Content ./tenacity/tenacity.nuspec)).package.metadata.version
          $tag = (Invoke-WebRequest "https://codeberg.org/api/v1/repos/tenacityteam/tenacity/releases" | ConvertFrom-Json)[0].tag_name
          $tag = $tag.Trim("v")
          
          echo $Version
          echo $tag
          
          if ( $tag -eq $Version )
          {
          echo 'Last version already exist'
          }
          else
          {
          if ($tag -match '^[0-9]+.[0-9]+((.[0-9]+)?(-beta)?)?$'){
          ./send_tenacity.ps1
          } else {
          echo 'The version number is not in the correct format'
          #exit 1
          }
          }
