name: MENDELEY-RM

on:
  schedule:
    - cron:  '30 */6 * * *'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - shell: pwsh
        env:
          CHOCO_API_KEY: ${{ secrets.CHOCO_API_KEY }}
        run: |
          choco apikey --key $env:CHOCO_API_KEY --source https://push.chocolatey.org/
          
      - name: Chocolatey
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: -h

      - name: Script
        env:
          CHOCO_API_KEY: ${{ secrets.CHOCO_API_KEY }}
          ACTIONS_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
          PST_KEY: ${{ secrets.PST_KEY }}
          PST_SECRET: ${{ secrets.PST_SECRET }}
          PST_TOKEN: ${{ secrets.PST_TOKEN }}
          PST_TOKEN_SECRET: ${{ secrets.PST_TOKEN_SECRET }}
        run:  |
          $Version = ([xml](Get-Content ./mendeley-reference-manager/mendeley-reference-manager.nuspec)).package.metadata.version
          Invoke-WebRequest -Uri "https://www.mendeley.com/release-notes-reference-manager" -OutFile "MRM.html"
          $Source = Get-Content -path MRM.html -raw
          $Source -match '<div class="views-field views-field-title"><span class="field-content"><a href="/release-notes-reference-manager/v([0-9]+(\.[0-9]+)+)">Reference Manager'
          $tag = $matches[1]
          
          echo $Version
          echo $tag
          
          if ( $tag -eq $Version )
          {
          echo 'Last version already exist'
          Remove-Item MRM.html
          }
          else
          {
          ./send_mendeley-reference-manager.ps1
          Remove-Item MRM.html
          #git and create tag
          git config --local user.email "a-d-r-i@outlook.fr"
          git config --local user.name "A-d-r-i"
          git add .
          git commit -m "[Bot] Update files - Mendeley - RM" --allow-empty
          git tag -a mendeley-rm-v$tag -m "Mendeley-Reference-Manager - version $tag"
          git push -f && git push --tags

          #create release
          Install-Module -Name New-GitHubRelease -Force
          Import-Module -Name New-GitHubRelease
          $newGitHubReleaseParameters = @{
          GitHubUsername = "A-d-r-i"
          GitHubRepositoryName = "update_choco_package"
          GitHubAccessToken = "${{ secrets.ACTIONS_TOKEN }}"
          ReleaseName = "Mendeley-Reference-Manager v$tag"
          TagName = "mendeley-rm-v$tag"
          ReleaseNotes = "$release"
          AssetFilePaths = ".\mendeley-reference-manager\mendeley-reference-manager.$tag.nupkg"
          IsPreRelease = $false
          IsDraft = $false
          }
          $resultrelease = New-GitHubRelease @newGitHubReleaseParameters
          }
